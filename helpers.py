import requests
import pymysql
import sqlalchemy

import pandas as pd

def _get_data(url):
    '''
    Send HTTP Request GET method to url endpoint
    Args:
        url (str): url endpoint to be called
    Return:
        Response in json format
    '''
    response = requests.get(url)
    return response.json()

def get_delisted_companies(url, api_key):
    '''
    Get delisted company data from FMP
    Args:
        url (str):      url endpoint of delisted companies data
        api_key (str):  token generated by endpoint for authentication
    Return:
        Pandas DataFrame of delisted companies data
    '''
    parse_url = f'{url}?page=0&apikey={api_key}'
    data = _get_data(parse_url)
    return pd.DataFrame(data)

def get_historical_dividends(symbols, url, api_key):
    '''
    Get historical_dividends data from FMP
    Args:
        url (str):      url endpoint of historical_dividends data
        api_key (str):  token generated by endpoint for authentication
    Return:
        Pandas DataFrame of historical_dividends data
    '''
    data_list = []
    for symbol in symbols:
        parse_url = f'{url}/{symbol}?apikey={api_key}'
        data = _get_data(parse_url)
        for row in data['historical']:
            row['symbol'] = symbol
        data_list += data['historical']
    return pd.DataFrame(data_list)

def get_db_engine(host, user, password, db_name):
    '''
    Create MySQL database engine with specified database name
    Args:
        host (str):     host name of MySQL database (localhost)
        user (str):     username of MySQL database (root)
        password (str): password of MySQL database
        db_name (str):  specified database name (fmp_stock)
    Return:
        SQL Alchemy database engine
    '''
    engine = sqlalchemy.create_engine(f'mysql+pymysql://{user}:{password}@{host}/{db_name}')
    return engine

def write_pandas_to_mysql(table_dict, engine, if_exists='append'):
    '''
    Write Pandas DataFrame into mysql database using SQL Alchemy database engine
    Args:
        table_dict (dict):  dictionary, key of table name, value of Pandas DataFrame
        engine (engine):    SQL Alchemy database engine
        if_exists (str):    Writing condition with 'fail', 'append', or 'replace'
    Return:
        Void
    '''
    for table in table_dict:
        df = table_dict[table]
        print(df)
        df.to_sql(con=engine, name=table, if_exists=if_exists, index=False)